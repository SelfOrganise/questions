{"version":3,"sources":["components/Centered.tsx","components/QuestionRow.tsx","components/Questions.tsx","components/AddQuestion.tsx","components/AuthenticatedApolloProvider.tsx","utilities/useApolloClient.ts","App.tsx","index.tsx"],"names":["Centered","children","boxProps","Box","marginTop","display","alignItems","alignContent","justifyContent","justifyItems","DELETE_QUESTION","gql","QuestionRow","question","useMutation","deleteQuestion","loading","handleDeleteClick","useCallback","a","variables","id","update","cache","data","getQuestionsQuery","readQuery","query","GET_QUESTIONS","questions","writeQuery","filter","q","canDelete","TableRow","TableCell","align","content","IconButton","disabled","onClick","CircularProgress","size","Questions","useQuery","error","Typography","variant","length","TableContainer","component","Paper","Table","TableHead","TableBody","map","ADD_QUESTION","AddQuestion","useState","text","setText","addQuestion","submitError","handleOnClick","optimisticResponse","__typename","Math","floor","random","createdBy","createdAtUtc","flexDirection","TextField","multiline","rows","label","value","onChange","ev","target","Button","color","message","AuthenticatedApolloProvider","props","client","useAuth0","getAccessTokenSilently","isAuthenticated","setClient","token","setToken","useEffect","then","httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","ctx","Auth0Context","console","log","what","Authorization","ApolloClient","InMemoryCache","link","concat","useApolloClient","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","url","window","location","origin","pathname","App","classes","logout","loginWithRedirect","isLoading","AppBar","position","Toolbar","className","returnTo","Container","maxWidth","padding","createMuiTheme","ReactDOM","render","StrictMode","domain","clientId","audience","redirectUri","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.0b1c1813.chunk.js","sourcesContent":["import Box from \"@material-ui/core/Box\";\nimport { BoxProps } from \"@material-ui/core/Box/Box\";\nimport React from \"react\";\n\nexport function Centered({\n  children,\n  ...boxProps\n}: React.PropsWithChildren<BoxProps>) {\n  return (\n    <Box\n      marginTop=\"10%\"\n      display=\"flex\"\n      alignItems=\"center\"\n      alignContent=\"center\"\n      justifyContent=\"center\"\n      justifyItems=\"center\"\n      {...boxProps}\n    >\n      {children}\n    </Box>\n  );\n}\n","import { gql, useMutation } from \"@apollo/client\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport React, { useCallback } from \"react\";\nimport { GET_QUESTIONS } from \"./Questions\";\nimport { Question } from \"./types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst DELETE_QUESTION = gql`\n  mutation addQuestion($id: Int!) {\n    deleteQuestion(id: $id)\n  }\n`;\n\nexport function QuestionRow({ question }: { question: Question }) {\n  const [deleteQuestion, { loading }] = useMutation(DELETE_QUESTION);\n\n  const handleDeleteClick = useCallback(async () => {\n    await deleteQuestion({\n      variables: { id: question.id },\n      update: (cache, { data }) => {\n        if (data.deleteQuestion !== true) {\n          return;\n        }\n\n        const getQuestionsQuery: any =\n          cache.readQuery({ query: GET_QUESTIONS }) || [];\n\n        if (!getQuestionsQuery.questions) {\n          return;\n        }\n\n        cache.writeQuery({\n          query: GET_QUESTIONS,\n          data: {\n            questions: [\n              ...getQuestionsQuery.questions.filter(\n                (q: Question) => q.id !== question.id\n              ),\n            ],\n          },\n        });\n      },\n    });\n  }, [deleteQuestion, question.id]);\n\n  const canDelete = !loading && question.id >= 0;\n\n  return (\n    <TableRow>\n      <TableCell align=\"left\">{question.content}</TableCell>\n      <TableCell align=\"right\">\n        <IconButton disabled={!canDelete} onClick={handleDeleteClick}>\n          {canDelete ? <DeleteOutlinedIcon /> : <CircularProgress size=\"1em\" />}\n        </IconButton>\n      </TableCell>\n    </TableRow>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { Centered } from \"./Centered\";\nimport { QuestionRow } from \"./QuestionRow\";\nimport { Question } from \"./types\";\n\nexport const GET_QUESTIONS = gql`\n  query questions {\n    questions {\n      id\n      content\n      createdBy\n      createdAtUtc\n    }\n  }\n`;\n\nexport function Questions() {\n  const { data, error, loading } = useQuery(GET_QUESTIONS);\n\n  if (loading || data == null) {\n    return (\n      <Centered>\n        <Typography variant=\"body1\">Loading questions</Typography>\n      </Centered>\n    );\n  }\n\n  if (error) {\n    return (\n      <Centered>\n        <Typography variant=\"body1\">Error loading questions</Typography>\n      </Centered>\n    );\n  }\n\n  if (data.questions?.length <= 0) {\n    return (\n      <Centered>\n        <Typography variant=\"body1\">No questions added</Typography>\n      </Centered>\n    );\n  }\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\">Question</TableCell>\n            <TableCell align=\"right\" />\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.questions.map((question: Question) => (\n            <QuestionRow question={question} key={question.id} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import { gql, useMutation } from \"@apollo/client\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React, { useCallback, useState } from \"react\";\nimport { GET_QUESTIONS } from \"./Questions\";\n\nconst ADD_QUESTION = gql`\n  mutation addQuestion($content: String!) {\n    addQuestion(content: $content) {\n      id\n      content\n      createdBy\n      createdAtUtc\n    }\n  }\n`;\n\nexport function AddQuestion() {\n  const [text, setText] = useState(\"\");\n\n  const [addQuestion, { error: submitError, loading }] = useMutation(\n    ADD_QUESTION\n  );\n\n  const handleOnClick = useCallback(async () => {\n    setText(\"\");\n    await addQuestion({\n      variables: {\n        content: text,\n      },\n      optimisticResponse: {\n        __typename: \"Mutation\",\n        addQuestion: {\n          __typename: \"Question\",\n          id: -Math.floor(Math.random() * 10000),\n          content: text,\n          createdBy: -1,\n          createdAtUtc: \"\",\n        },\n      },\n      update: (cache, { data }) => {\n        const query: any = cache.readQuery({ query: GET_QUESTIONS });\n        cache.writeQuery({\n          query: GET_QUESTIONS,\n          data: { questions: [data.addQuestion, ...query.questions] },\n        });\n      },\n    });\n  }, [addQuestion, text, setText]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <TextField\n        variant=\"outlined\"\n        multiline={true}\n        rows={3}\n        label=\"Type in a new question\"\n        value={text}\n        onChange={(ev) => setText(ev.target.value)}\n      />\n      <Box marginTop=\"10px\" display=\"flex\" justifyContent=\"flex-end\">\n        <Button\n          disabled={text.length === 0 || loading}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleOnClick}\n        >\n          Add question\n        </Button>\n      </Box>\n      <span>{submitError ? submitError.message : \"\"}</span>\n    </Box>\n  );\n}\n","import { ApolloProvider } from \"@apollo/client\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport React from \"react\";\nimport { useApolloClient } from \"../utilities/useApolloClient\";\nimport { Centered } from \"./Centered\";\n\nexport function AuthenticatedApolloProvider(\n  props: React.PropsWithChildren<unknown>\n) {\n  const client = useApolloClient();\n  if (!client) {\n    return (\n      <Centered>\n        <CircularProgress />\n      </Centered>\n    );\n  }\n\n  return <ApolloProvider client={client}>{props.children}</ApolloProvider>;\n}\n","import {\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { Auth0Context, useAuth0 } from \"@auth0/auth0-react\";\nimport { useEffect, useState } from \"react\";\n\nexport function useApolloClient() {\n  const { getAccessTokenSilently, isAuthenticated } = useAuth0();\n  const [client, setClient] = useState<ApolloClient<NormalizedCacheObject>>();\n  const [token, setToken] = useState<string>();\n  useEffect(() => {\n    if (!isAuthenticated) {\n      return;\n    }\n\n    getAccessTokenSilently().then((token) => {\n      setToken(token);\n    });\n  }, [isAuthenticated, getAccessTokenSilently]);\n\n  useEffect(() => {\n    const httpLink = createHttpLink({\n      uri: process.env.REACT_APP_API_URL,\n    });\n\n    const authLink = setContext((_, { headers }) => {\n      const ctx = Auth0Context;\n      console.log({ ctx, what: _ });\n      return {\n        headers: {\n          ...headers,\n          Authorization: `Bearer ${token}`,\n        },\n      };\n    });\n\n    setClient(\n      new ApolloClient({\n        cache: new InMemoryCache(),\n        link: authLink.concat(httpLink),\n      })\n    );\n  }, [token]);\n\n  return client;\n}\n","import { useAuth0 } from \"@auth0/auth0-react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\nimport { AddQuestion } from \"./components/AddQuestion\";\nimport { AuthenticatedApolloProvider } from './components/AuthenticatedApolloProvider';\nimport { Centered } from \"./components/Centered\";\nimport { Questions } from \"./components/Questions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n// this might be incorrect if initial navigation isn't root of the app\nconst url = window.location.origin + window.location.pathname;\n\nfunction App() {\n  const classes = useStyles();\n  const { logout, loginWithRedirect, isAuthenticated, isLoading } = useAuth0();\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Questions\n          </Typography>\n          {isAuthenticated ? (\n            <Button color=\"inherit\" onClick={() => logout({ returnTo: url })}>\n              Logout\n            </Button>\n          ) : (\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              onClick={() => loginWithRedirect()}\n            >\n              Login\n            </Button>\n          )}\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"md\" className=\"App\">\n        {isAuthenticated && (\n          <AuthenticatedApolloProvider>\n            <Box padding={5}>\n              <AddQuestion />\n              <Questions />\n            </Box>\n          </AuthenticatedApolloProvider>\n        )}\n        {isLoading && (\n          <Centered>\n            <CircularProgress />\n          </Centered>\n        )}\n        {!isAuthenticated && !isLoading && (\n          <Centered>\n            <Typography variant=\"h5\">Please login</Typography>\n          </Centered>\n        )}\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { Auth0Provider } from \"@auth0/auth0-react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport ReactDOM from \"react-dom\";\n\n// this might be incorrect if initial navigation isn't root of the app\nconst url = window.location.origin + window.location.pathname;\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Auth0Provider\n      domain=\"boiculese.auth0.com\"\n      clientId=\"9umXUJ235FysjsLWAvJKHE43jN7toi4P\"\n      audience=\"https://bogdbo-questions-api.herokuapp.com\"\n      redirectUri={url}\n    >\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </Auth0Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}