{"version":3,"sources":["components/QuestionRow.tsx","components/Questions.tsx","components/AddQuestion.tsx","components/Question.tsx","App.tsx","index.tsx"],"names":["DELETE_QUESTION","gql","QuestionRow","question","useMutation","deleteQuestion","loading","handleDeleteClick","useCallback","a","variables","id","update","cache","data","existingQuestions","readQuery","query","GET_QUESTIONS","writeQuery","questions","filter","q","TableRow","TableCell","component","scope","align","content","createdAtUtc","CircularProgress","size","Button","onClick","Questions","useQuery","error","length","TableContainer","Paper","Table","TableHead","TableBody","map","ADD_QUESTION","AddQuestion","useState","text","setText","addQuestion","submitError","handleOnClick","optimisticResponse","__type","createdBy","Box","value","onChange","ev","target","color","message","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Question","classes","bull","className","Card","CardContent","Typography","gutterBottom","variant","CardActions","theme","flexGrow","menuButton","marginRight","spacing","apolloClient","ApolloClient","uri","process","InMemoryCache","createMuiTheme","App","useAuth0","logout","loginWithRedirect","isAuthenticated","user","console","log","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","aria-label","returnTo","window","location","origin","Container","maxWidth","padding","email","AuthenticatedApp","domain","clientId","redirectUri","pathname","client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07486aaf.chunk.js","sourcesContent":["import { gql, useMutation } from '@apollo/client';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport React, { useCallback } from 'react';\nimport { GET_QUESTIONS } from './Questions';\nimport { Question } from './types';\n\nconst DELETE_QUESTION = gql`\n  mutation addQuestion($id: Int!) {\n    deleteQuestion(id: $id)\n  }\n`;\n\nexport function QuestionRow({ question }: { question: Question }) {\n  const [deleteQuestion, { loading }] = useMutation(DELETE_QUESTION);\n\n  const handleDeleteClick = useCallback(async () => {\n    await deleteQuestion({\n      variables: { id: question.id }, update: (cache, { data }) => {\n        if (data.deleteQuestion !== true) {\n          return;\n        }\n\n        const existingQuestions: any = cache.readQuery({ query: GET_QUESTIONS }) || [];\n        cache.writeQuery({\n          query: GET_QUESTIONS,\n          data: {\n            questions: [...existingQuestions.questions.filter((q: Question) => q.id !== question.id)],\n          }\n        })\n      }\n    });\n  }, [deleteQuestion, question.id])\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {question.id}\n      </TableCell>\n      <TableCell align=\"right\">{question.content}</TableCell>\n      <TableCell align=\"right\">{question.createdAtUtc}</TableCell>\n      <TableCell align=\"right\">\n        {loading ? <CircularProgress size=\"1em\"/> : <Button onClick={handleDeleteClick}>Delete</Button>}\n      </TableCell>\n    </TableRow>\n  )\n}\n","import { gql, useQuery } from '@apollo/client';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport React from 'react';\nimport { QuestionRow } from './QuestionRow';\nimport { Question } from './types';\n\nexport const GET_QUESTIONS = gql`\n  query {\n    questions {\n      id,\n      content,\n      createdBy,\n      createdAtUtc\n    }\n  }\n`;\n\n\nexport function Questions() {\n  const { data, error, loading } = useQuery(GET_QUESTIONS);\n\n  if (loading) {\n    return <span>'Loading questions'</span>;\n  }\n\n  if (error) {\n    return <span>'Error loading questions'</span>\n  }\n\n  if (data.questions?.length <= 0) {\n    return null;\n  }\n\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"right\">Id</TableCell>\n            <TableCell align=\"right\">Question</TableCell>\n            <TableCell align=\"right\">Created at</TableCell>\n            <TableCell align=\"right\">Actions</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.questions.map((question: Question) => (<QuestionRow question={question} key={question.id}/>))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n","import { gql, useMutation } from '@apollo/client';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport React, { useCallback, useState } from 'react';\nimport { GET_QUESTIONS } from './Questions';\n\nconst ADD_QUESTION = gql`\n  mutation addQuestion($content: String!) {\n    addQuestion(content: $content) {\n      id\n    }\n  }\n`;\n\nexport function AddQuestion() {\n  const [text, setText] = useState('');\n\n  const [addQuestion, { error: submitError }] = useMutation(ADD_QUESTION);\n\n  const handleOnClick = useCallback(async () => {\n    await addQuestion({\n      variables: {\n        content: text\n      },\n      optimisticResponse: {\n        addQuestion: {\n          __type: 'Question',\n          id: -1,\n          content: text,\n          createdBy: -1,\n          createdAtUtc: 'unknown',\n        }\n      },\n      update: (cache, { data }) => {\n        const existingQuestions: any = cache.readQuery({ query: GET_QUESTIONS}) || [];\n        cache.writeQuery({\n          query: GET_QUESTIONS,\n          data: {\n            questions: [...existingQuestions.questions, data.addQuestion],\n          }\n        })\n      }\n    });\n\n    setText('');\n  }, [addQuestion, text, setText]);\n\n  return (\n    <Box>\n      <TextField value={text} onChange={ev => setText(ev.target.value)}/>\n      <Button color=\"primary\" onClick={handleOnClick}>Add question</Button>\n      <span>{submitError ? submitError.message : ''}</span>\n    </Box>\n  )\n}\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport function Question() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          Word of the Day\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          be{bull}nev{bull}o{bull}lent\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          adjective\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          well meaning and kindly.\n          <br/>\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  )\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { AddQuestion } from './components/AddQuestion';\nimport { Question } from './components/Question';\nimport { Auth0Provider, useAuth0 } from '@auth0/auth0-react';\nimport { Questions } from './components/Questions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst apolloClient = new ApolloClient({\n  uri: process.env.REACT_APP_API_URL,\n  cache: new InMemoryCache(),\n});\n\nconst theme = createMuiTheme();\n\nfunction AuthenticatedApp() {\n  return (\n    <Auth0Provider\n      domain=\"boiculese.auth0.com\"\n      clientId=\"9umXUJ235FysjsLWAvJKHE43jN7toi4P\"\n      redirectUri={window.location.origin + window.location.pathname}\n    >\n      <ApolloProvider client={apolloClient}>\n        <App/>\n      </ApolloProvider>\n    </Auth0Provider>\n  );\n}\n\n\nfunction App() {\n  const classes = useStyles();\n  const { logout, loginWithRedirect, isAuthenticated, user } = useAuth0();\n  console.log({ isAuthenticated });\n  return (\n    <ThemeProvider theme={theme}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon/>\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Questions\n          </Typography>\n          {isAuthenticated\n            ? <Button color=\"inherit\" onClick={() => logout({ returnTo: window.location.origin })}>Logout</Button>\n            : <Button color=\"inherit\" onClick={() => loginWithRedirect()}>Login</Button>}\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\" className=\"App\">\n        <Box padding={5}>\n          <Question/>\n          {isAuthenticated ? user.email : 'unauthenticated'}\n          <AddQuestion/>\n          <Questions/>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default AuthenticatedApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}